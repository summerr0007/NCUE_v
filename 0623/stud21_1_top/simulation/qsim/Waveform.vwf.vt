// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/23/2021 15:37:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          stud21_1_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module stud21_1_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] kc_sel;
reg rst;
// wires                                               
wire [5:0] buf_flag;
wire [23:0] key_buf_code_1;
wire [23:0] key_buf_code_2;
wire [31:0] key_buf_code_3;
wire [31:0] key_buf_code_4;
wire [3:0] kr_sel;
wire press;
wire [3:0] scan_code;

// assign statements (if any)                          
stud21_1_top i1 (
// port map - connection between master ports and signals/registers   
	.buf_flag(buf_flag),
	.clk(clk),
	.kc_sel(kc_sel),
	.key_buf_code_1(key_buf_code_1),
	.key_buf_code_2(key_buf_code_2),
	.key_buf_code_3(key_buf_code_3),
	.key_buf_code_4(key_buf_code_4),
	.kr_sel(kr_sel),
	.press(press),
	.rst(rst),
	.scan_code(scan_code)
);
initial 
begin 
#600000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #20000 1'b0;
end 
// kc_sel[ 3 ]
initial
begin
	kc_sel[3] = 1'b0;
	kc_sel[3] = #70000 1'b1;
	kc_sel[3] = #10000 1'b0;
	kc_sel[3] = #20000 1'b1;
	kc_sel[3] = #10000 1'b0;
	kc_sel[3] = #50000 1'b1;
	kc_sel[3] = #10000 1'b0;
	kc_sel[3] = #20000 1'b1;
	kc_sel[3] = #10000 1'b0;
	kc_sel[3] = #40000 1'b1;
	kc_sel[3] = #10000 1'b0;
	kc_sel[3] = #30000 1'b1;
	kc_sel[3] = #10000 1'b0;
	kc_sel[3] = #20000 1'b1;
	kc_sel[3] = #10000 1'b0;
end 
// kc_sel[ 2 ]
initial
begin
	kc_sel[2] = 1'b0;
	kc_sel[2] = #70000 1'b1;
	kc_sel[2] = #10000 1'b0;
	kc_sel[2] = #20000 1'b1;
	kc_sel[2] = #10000 1'b0;
	kc_sel[2] = #50000 1'b1;
	kc_sel[2] = #10000 1'b0;
	kc_sel[2] = #20000 1'b1;
	kc_sel[2] = #10000 1'b0;
	kc_sel[2] = #10000 1'b1;
	kc_sel[2] = #10000 1'b0;
	kc_sel[2] = #20000 1'b1;
	kc_sel[2] = #10000 1'b0;
	kc_sel[2] = #100000 1'b1;
	kc_sel[2] = #10000 1'b0;
	kc_sel[2] = #20000 1'b1;
	kc_sel[2] = #10000 1'b0;
end 
// kc_sel[ 1 ]
initial
begin
	kc_sel[1] = 1'b0;
	kc_sel[1] = #70000 1'b1;
	kc_sel[1] = #10000 1'b0;
	kc_sel[1] = #130000 1'b1;
	kc_sel[1] = #10000 1'b0;
	kc_sel[1] = #20000 1'b1;
	kc_sel[1] = #10000 1'b0;
	kc_sel[1] = #30000 1'b1;
	kc_sel[1] = #10000 1'b0;
	kc_sel[1] = #20000 1'b1;
	kc_sel[1] = #10000 1'b0;
	kc_sel[1] = #30000 1'b1;
	kc_sel[1] = #10000 1'b0;
	kc_sel[1] = #20000 1'b1;
	kc_sel[1] = #10000 1'b0;
end 
// kc_sel[ 0 ]
initial
begin
	kc_sel[0] = 1'b0;
	kc_sel[0] = #100000 1'b1;
	kc_sel[0] = #10000 1'b0;
	kc_sel[0] = #50000 1'b1;
	kc_sel[0] = #10000 1'b0;
	kc_sel[0] = #20000 1'b1;
	kc_sel[0] = #10000 1'b0;
	kc_sel[0] = #10000 1'b1;
	kc_sel[0] = #10000 1'b0;
	kc_sel[0] = #60000 1'b1;
	kc_sel[0] = #10000 1'b0;
	kc_sel[0] = #20000 1'b1;
	kc_sel[0] = #10000 1'b0;
	kc_sel[0] = #30000 1'b1;
	kc_sel[0] = #10000 1'b0;
	kc_sel[0] = #20000 1'b1;
	kc_sel[0] = #10000 1'b0;
end 
endmodule

